Python List

- ordered, mutable collection of items in Python - can contain elements of different data types, including other lists 

    fruit_list = ["apple, "banana", "cherry"]
    mixed_list = [1, "two", 3.0, False, 5]

    Access itmes in the list through the index
    print(fruit_list[0])     # Output: apple
    print(fruit_list[-1])    # Output: cherry


Slicing lists
- Slicing allows you to access a subset of the list

    list[start:stop:step]
    ** the stop index is exclusive and therefore not returned in the output

    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

    print(numbers[2:5])     # Output: [2, 3,  4]
    print(numbers[:4])      # Output: [0, 1, 2, 3]
    print(numbers[5:])      # Output: [5, 6, 7, 8, 9]

    print(number[::2])
    Start and stop are left blank so the step is initialized to 2 which slices even number


Modifying lists

    - append() - adds a single element to the end of a list
    - extend() - adds multiple elements from another iterable
    - insert () - inserts an element at a specified index position

    fruit_list.append("dragon fruit") # Output: ["apple", "banana", "cherry", "dragon fruit"]


Removing elements
    - remove() - removes the first occurrence of a specified value
    - pop() - removes and returns the element at a given index
    - clear() - removes all elements from the list

    fruits.remove("apple") # Output: ["banana", "cherry", "dragon fruit"]

    poppedItem = fruit_list.pop(0)
    print(poppedItem))  # Output: banana
    print(fruit_list) = ["cherry', dragon fruit"]


List Comprehension
    - a concise way to create a new list from an existing iterable (list, tuple, range, etc) by applying a transformation or filter to each element.